package by.htp.project.task02;

public class Task02 {

	// 1. –í –º–∞—Å—Å–∏–≤ A [N] –∑–∞–Ω–µ—Å–µ–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
	// –ù–∞–π—Ç–∏ —Å—É–º–º—É —Ç–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∞—Ç–Ω—ã –¥–∞–Ω–Ω–æ–º—É –ö.
	public void numbersDivides(int n, int k) {
		int[] mas;
		int sum;

		sum = 0;
		mas = new int[n];

		for (int i = 0; i < n; i++) {

			if (mas[i] % k == 0) {
				sum += mas[i];
			}

		}

	}

	// 2. –í —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
	// –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ –Ω–æ–º–µ—Ä–æ–≤ —ç—Ç–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
	public int[] massNull(int[] mas) {
		int[] masnull;
		int count;

		count = 0;

		for (int i = 0; i < mas.length; i++) {

			if (mas[i] == 0) {
				count++;
			}

		}

		masnull = new int[count];
		int j = 0;

		for (int i = 0; i < mas.length; i++) {
			if (mas[i] == 0) {
				masnull[j] = i;
				j++;
			}
		}

		return masnull;
	}

	// 3. –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∞1 –∞2 ,..., –∞n .
	// –í—ã—è—Å–Ω–∏—Ç—å, –±—É–¥–µ—Ç –ª–∏ –æ–Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π.
	public boolean vozrMass(int[] mas) {

		for (int i = 0; i < mas.length - 1; i++) {

			if (mas[i] > mas[i + 1]) {
				return false;
			}

		}
		return true;
	}

	// 4. –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∞1 , –∞2 ,..., –∞–ø.
	// –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
	// –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Ç, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º —Ñ–∞–∫—Ç–µ.
	public int[] number2(int[] mas) {
		int[] mas2;
		int count;

		count = 0;

		for (int i = 0; i < mas.length; i++) {

			if (mas[i] % 2 == 0) {
				count++;
			}

		}

		mas2 = new int[count];
		int j = 0;

		if (count == 0) {
			return mas2;
		}

		for (int i = 0; i < mas.length; i++) {

			if (mas[i] % 2 == 0) {
				mas2[j] = mas[i];
				j++;
			}

		}

		return mas2;

	}

	// 5. –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –∞1 ,–∞2 ,..., –∞–ø.
	// –£–∫–∞–∑–∞—Ç—å –Ω–∞–∏–º–µ–Ω—å—à—É—é –¥–ª–∏–Ω—É —á–∏—Å–ª–æ–≤–æ–π –æ—Å–∏, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≤—Å–µ —ç—Ç–∏ —á–∏—Å–ª–∞
	public int[] minMaxnumbers(int[] mas) {

		int[] minMax = new int[2];
		minMax[0] = mas[0];
		minMax[1] = mas[0];

		for (int i = 0; i < mas.length; i++) {

			if (minMax[0] > mas[i]) {
				minMax[0] = mas[i];
			}

			if (minMax[1] < mas[i]) {
				minMax[1] = mas[i];
			}

		}

		return minMax;
	}

	// 6. –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∞1 ,–∞2 ,..., –∞–ø. –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ
	// –µ–µ —á–ª–µ–Ω—ã, –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω–æ–≥–æ Z, —ç—Ç–∏–º —á–∏—Å–ª–æ–º.
	// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω.
	public int[] compareZ(int[] mas, int z) {
		int count = 0;

		for (int i = 0; i < mas.length; i++) {

			if (mas[i] > z) {
				count++;
				mas[i] = z;
			}

		}

		System.out.println(" –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω: " + count);
		return mas;
	}

	// 7. –î–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∞1 ,–∞2 ,..., –∞n .
	// –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏ –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã.
	public int[] replaceMinMaxNumbers(int[] mas) {

		int max = mas[0];
		int min = mas[0];
		int indexMin = 0;
		int indexMax = 0;

		int temp = 0;

		for (int i = 0; i < mas.length; i++) {

			if (min > mas[i]) {
				min = mas[i];
				indexMin = i;
			}

			if (max < mas[i]) {
				max = mas[i];
				indexMax = i;
			}

		}

		temp = mas[indexMin];
		mas[indexMin] = mas[indexMax];
		mas[indexMax] = temp;

		return mas;

	}

	// 8. –î–∞–Ω—ã —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∞1 ,–∞2 ,..., –∞n .
	// –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —á–∏—Å–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∞i > i.
	public void printA(int[] mas) {

		for (int i = 0; i < mas.length; i++) {

			if (mas[i] > i) {
				System.out.println(mas[i]);
			}

		}

	}

	// 9. –î–∞–Ω –º–∞—Å—Å–∏–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ N.
	// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö,
	// –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –Ω—É–ª–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
	public void nullPlusMinusNumber(int[] mas) {

		int numberNull = 0;
		int numberPlus = 0;
		int numberMinus = 0;

		for (int i = 0; i < mas.length; i++) {

			if (mas[i] > 0) {

				numberPlus++;

			} else if (mas[i] < 0) {

				numberMinus++;

			} else {

				numberNull++;

			}
		}

		System.out.println("–Ω—É–ª–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + numberNull);
		System.out.println("–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + numberPlus);
		System.out.println("–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + numberMinus);

	}

	// 10. –î–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ ùëé1, ùëé2 , ‚Ä¶ , ùëé2ùëõ.
	// –ù–∞–π—Ç–∏
	// max( , , , ) a1 + a2n a2 + a2n‚àí1 ÔÅã an + an+1
	public void maxSumNumber(int n) {

		int[] mas = new int[2 * n];

		for (int i = 0; i < mas.length; i++) {

			mas[i] = ((int) (Math.random() * 13));
			System.out.println(mas[i]);

		}

		int max = mas[0] + mas[2 * n - 1];

		for (int i = 1; i < n - 1; i++) {

			if (max < (mas[i] + mas[2 * n - 1 - i])) {
				max = mas[i] + mas[2 * n - 1 - i];
			}

		}

		System.out.println(" max( a1+a2n, a2+a2n-1 ,.... , an+an+1) : " + max);
	}

}
